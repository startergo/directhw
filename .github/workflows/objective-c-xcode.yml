name: Xcode - Build and Analyze (10.6+ target)

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    name: Build and analyse default scheme using xcodebuild command
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Xcodebuild (Unsigned for CI)
        working-directory: ./DirectHW
        run: |
          # Build without signing for CI/CD - users can sign locally if needed
          xcodebuild -alltargets -project DirectHW.xcodeproj \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO
        
      - name: libs
        working-directory: ./DirectHW
        run: make libs

      - name: Create Package
        working-directory: ./DirectHW
        run: |
          # Create unsigned package for CI/CD distribution
          # Note: For production use, kext requires valid developer signature
          # Users should re-sign with their certificates: codesign --force --sign "Developer ID" DirectHW.kext
          if command -v pkgbuild >/dev/null 2>&1; then
            pkgbuild --root ./build/Release \
              --identifier com.directhw \
              --version 1.0 \
              --scripts . \
              DirectHW.pkg || echo "Package creation with pkgbuild failed, continuing..."
          elif [ -d "DirectHW.pmdoc" ]; then
            packagemaker --doc DirectHW.pmdoc --id com.directhw --out DirectHW.pkg || echo "Package creation with packagemaker failed, continuing..."
          else
            echo "No package creation method available, skipping..."
          fi

      - name: Create DMG
        run: |
          # Prepare DMG contents
          mkdir -p dmg_contents
          
          # Check what was actually built
          echo "=== Build directory contents ==="
          ls -la DirectHW/build/ || echo "No build directory"
          find DirectHW -name "*.kext" -o -name "*.framework" -o -name "*.dylib" -o -name "*.pkg" 2>/dev/null || echo "No built artifacts found"
          
          # Copy build artifacts if they exist
          if [ -f "./DirectHW/DirectHW.pkg" ]; then
            cp "./DirectHW/DirectHW.pkg" "dmg_contents/Install DirectHW.pkg"
          fi
          
          # Copy built binaries
          if [ -d "./DirectHW/build" ]; then
            find ./DirectHW/build -name "*.kext" -exec cp -r {} dmg_contents/ \;
            find ./DirectHW/build -name "*.framework" -exec cp -r {} dmg_contents/ \;
            find ./DirectHW/build -name "*.dylib" -exec cp {} dmg_contents/ \;
          fi
          
          # Copy documentation
          if [ -f "./DirectHW/ReadMe.rtf" ]; then
            cp "./DirectHW/ReadMe.rtf" "dmg_contents/Read Me.rtf"
          fi
          if [ -f "./DirectHW/Welcome.rtf" ]; then
            cp "./DirectHW/Welcome.rtf" "dmg_contents/Welcome.rtf"
          fi
          
          echo "=== DMG contents ==="
          ls -la dmg_contents/
          
          # Only create DMG if we have content
          if [ "$(ls -A dmg_contents/)" ]; then
            # Create DMG using create-dmg
            ./create-dmg/create-dmg \
              --volname "DirectHW" \
              --window-size 600 400 \
              --icon-size 100 \
              --app-drop-link 425 120 \
              DirectHW.dmg \
              dmg_contents/ || echo "DMG creation failed, but content exists"
          else
            echo "No content for DMG, skipping DMG creation"
          fi

      - name: Upload DMG Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: DirectHW-DMG
          path: |
            DirectHW.dmg
            dmg_contents/
          if-no-files-found: warn

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: DirectHW-Build-Artifacts
          path: |
            DirectHW/build/
            DirectHW/*.pkg
            DirectHW/*.kext
            DirectHW/*.framework
            DirectHW/*.dylib
          if-no-files-found: warn
